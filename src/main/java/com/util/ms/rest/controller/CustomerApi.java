/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.8).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.util.ms.rest.controller;

import javax.validation.Valid;

import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.util.ms.model.Customer;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-10-22T02:04:45.001Z")

@Api(value = "customer", description = "the customer API")
public interface CustomerApi {

    @ApiOperation(value = "Create customer", nickname = "createCustomer", notes = "This can only be done by the Authorized customer.", response = Customer.class, tags={ "customer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Customer.class),
        @ApiResponse(code = 200, message = "successful operation") })
    @RequestMapping(value = "/customer",
    	consumes = MediaType.APPLICATION_JSON_UTF8_VALUE,
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Customer> createCustomer(@RequestHeader("x-jwt-assertion") String xjwtAssert,
    		@ApiParam(value = "Created customer object" ,required=true )  @Valid @RequestBody Customer body);


    @ApiOperation(value = "Delete customer", nickname = "deleteCustomer", notes = "This can only be done by the logged in customer.", tags={ "customer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 400, message = "Invalid cname supplied"),
        @ApiResponse(code = 404, message = "Customer not found") })
    @RequestMapping(value = "/customer/{cname}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteCustomer(@ApiParam(value = "The customer that needs to be deleted",required=true) @PathVariable("cname") String cname);


    @ApiOperation(value = "Get customer by customer name", nickname = "getCustomerByName", notes = "", response = Customer.class, tags={ "customer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Customer.class),
        @ApiResponse(code = 400, message = "Invalid username supplied"),
        @ApiResponse(code = 404, message = "User not found") })
    @RequestMapping(value = "/customer/{cname}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<Customer> getCustomerByName(@ApiParam(value = "The name that needs to be fetched. Use user1 for testing.",required=true) @PathVariable("cname") String cname);


    @ApiOperation(value = "Update customer", nickname = "updateCustomer", notes = "This can only be done by the logged in customer.", response = Customer.class, tags={ "customer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Customer.class),
        @ApiResponse(code = 400, message = "Invalid customer user supplied"),
        @ApiResponse(code = 404, message = "Customer not found") })
    @RequestMapping(value = "/customer/{cname}",
    	consumes = MediaType.APPLICATION_JSON_UTF8_VALUE,
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Customer> updateCustomer(@ApiParam(value = "customer name that need to be updated",required=true) @PathVariable("cname") String cname,@ApiParam(value = "Update customer object" ,required=true )  @Valid @RequestBody Customer body);

}
